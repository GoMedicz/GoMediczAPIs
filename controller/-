// const { Email, PhoneNumber } = req.body;
//     if (!Email || !PhoneNumber) {
//       return res.status(401).json({
//         message: "fields cannot be empty",
//         error: utils.getMessage(" DATA_ERROR"),
//       });
//     }
//     const existingUser = await User.findOne({
//       where: { Email: req.body.Email },
//     });
//     if (existingUser) {
//       return res.status(400).json({
//         message: "This account already exists",
//         error: utils.getMessage("ACCOUNT_EXISTS_ERROR"),
//       });
//     }
//     const otp = otpGenerator.generate(6, {
//       digit: true,
//       alphabets: false,
//       upperCase: false,
//       specialChars: false,
//     });

//     const accountSid = process.env.TWILIO_ACCOUNT_SID;
//     const authToken = process.env.TWILIO_AUTH_TOKEN;
//     const client = require("twilio")(accountSid, authToken);
//     client.messages
//       .create({
//         body: `+${otp}`,
//         from: "+15736725667",
//         to: `+${PhoneNumber}`,
//       })
//       .then((message) => console.log(message.sid));

//     // console.log(otp);
//     const salt = await bcrypt.genSalt(10);
//     const hashedOtp = await bcrypt.hash(otp, salt);

//     const otpData = await OTPx.create({
//       PhoneNumber: req.body.PhoneNumber,
//       otp: hashedOtp,
//     });
//     if (!otpData) {
//       return res
//         .status(400)
//         .json({ status: false, message: utils.getMessage("OTP_ERROR") });
//     }
//     return res
//       .status(200)
//       .json({ message: utils.getMessage("QUERY_SUCCESS"), data: otpData });